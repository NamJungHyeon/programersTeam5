# ===============================================
# DATABASE CONFIGURATION
# ===============================================

# 데이터베이스 연결을 위한 JDBC URL
# localhost:3306/your-db-name 부분에서 'your-db-name'을 실제 데이터베이스 이름으로 변경해주세요.
spring.datasource.url=jdbc:mysql://localhost:3306/your-db-name?useSSL=false&serverTimezone=UTC&characterEncoding=UTF-8

# 데이터베이스 사용자 이름 (예: root)
spring.datasource.username=your-username

# 데이터베이스 비밀번호
spring.datasource.password=your-password

# MySQL 드라이버 클래스 지정
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver

# ===============================================
# JPA & HIBERNATE CONFIGURATION
# ===============================================

# JPA(Hibernate)가 데이터베이스 스키마를 다루는 방식 설정
# update: 애플리케이션 시작 시, 엔티티와 테이블 간의 차이를 비교하여 자동으로 스키마를 업데이트합니다. (개발 시 유용)
# none: 아무것도 하지 않음 (운영 환경에서 권장)
# create: 시작할 때마다 기존 테이블을 삭제하고 새로 만듭니다.
# create-drop: 시작할 때 테이블을 생성하고, 종료될 때 삭제합니다.
spring.jpa.hibernate.ddl-auto=update

# JPA가 실행하는 SQL 쿼리를 로그에 표시할지 여부
# true로 설정하면 어떤 SQL이 실행되는지 볼 수 있어 디버깅에 매우 유용합니다.
spring.jpa.show-sql=true

# 로그에 표시되는 SQL을 보기 좋게 포맷팅할지 여부
spring.jpa.properties.hibernate.format_sql=true

# Hibernate가 사용할 데이터베이스 방언(Dialect)을 명시적으로 지정
# MySQL 8 버전을 사용하므로 MySQLDialect를 지정합니다.
# 이 설정을 추가하면 데이터베이스 종류를 더 확실하게 인지하여 안정성이 높아집니다.
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQLDialect 